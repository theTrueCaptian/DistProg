Ads not by this Site

Chinese Calendar 2012

Chinese Calendar 2013

Chinese Calendar 2014

Chinese Festivals

More on Chinese Culture

More Chinese Calendars

200 Years: 1901 to 2100

Chinese-Pinyin Translator

Chinese-English Dictionary

Best Chinese Movies - Films

Best Chinese TV Series

Best Chinese Music

Traditional and Modern

Download: hySite

Simple site directory in PHP

Download: hyBook

Simple guestbook in ASP

Download: hyBook-PHP

Simple guestbook in PHP
	

Cryptography Tutorials - Herong's Tutorial Examples

?SHA1 Mesasge Digest Algorithm

?Using SHA1 Message Digest in Java

Comments	Email
PDF	RSS

© 2011 by Dr. Herong Yang.
All rights reserved.

This section provides a tutorial example on how to use SHA1 message digest algorithm in Java. The JDK JCE package offers the SHA1 algorithm through a generic message digest class, javax.security.MessageDigest.
	
Ads not by this Site

Sun provides SHA1 algorithm in Java under their JCE (Java Cryptography Extension) package, which is included in JDK 1.5.

Sun's implementation of SHA1 can be accessed through a generic class called MessageDigest. Here are the main methods of MessageDigest class:

    getInstance("SHA1") - Returns a message digest object represents a specific implementation of SHA1 algorithm from the default provider, Sun.
    getProvider() - Returns the provider name of the current object.
    update(bytes) - Updates the input message by appending a byte array at the end.
    digest() - Performs SHA1 algorithm on the current input message and returns the message digest as a byte array. This method also resets the input message to an empty byte string.
    reset() - Resets the input message to an empty byte string.

Here is a sample Java program to show you how to use the MessageDigest class to perform some tests on SHA1 algorithms.

/**
 * JceSha1Test.java
 * Copyright (c) 2013 by Dr. Herong Yang, herongyang.com
 */
import java.security.*;
class JceSha1Test {
   public static void main(String[] a) {
      try {
         MessageDigest md = MessageDigest.getInstance("SHA1");
         System.out.println("Message digest object info: ");
         System.out.println("   Algorithm = "+md.getAlgorithm());
         System.out.println("   Provider = "+md.getProvider());
         System.out.println("   toString = "+md.toString());

         String input = "";
         md.update(input.getBytes()); 
      	 byte[] output = md.digest();
         System.out.println();
         System.out.println("SHA1(\""+input+"\") =");
         System.out.println("   "+bytesToHex(output));

         input = "abc";
         md.update(input.getBytes()); 
      	 output = md.digest();
         System.out.println();
         System.out.println("SHA1(\""+input+"\") =");
         System.out.println("   "+bytesToHex(output));

         input = "abcdefghijklmnopqrstuvwxyz";
         md.update(input.getBytes()); 
      	 output = md.digest();
         System.out.println();
         System.out.println("SHA1(\""+input+"\") =");
         System.out.println("   "+bytesToHex(output));
         
      } catch (Exception e) {
         System.out.println("Exception: "+e);
      }
   }
   public static String bytesToHex(byte[] b) {
      char hexDigit[] = {'0', '1', '2', '3', '4', '5', '6', '7',
                         '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
      StringBuffer buf = new StringBuffer();
      for (int j=0; j<b.length; j++) {
         buf.append(hexDigit[(b[j] >> 4) & 0x0f]);
         buf.append(hexDigit[b[j] & 0x0f]);
      }
      return buf.toString();
   }
}

If you run this sample program with JDK 1.5, you should get the following output:

Message digest object info:
   Algorithm = SHA1
   Provider = SUN version 1.5
   toString = SHA1 Message Digest from SUN, <initialized>


SHA1("") =
   DA39A3EE5E6B4B0D3255BFEF95601890AFD80709

SHA1("abc") =
   A9993E364706816ABA3E25717850C26C9CD0D89D

SHA1("abcdefghijklmnopqrstuvwxyz") =
   32D10C7B8CF96570CA04CE37F2A19D84240D3A89

The output matches the testing result listed FreeBSD libmd makefile: http://www.opensource.apple.com/source/libmd/libmd-2/Makefile

Last update: 2013. 